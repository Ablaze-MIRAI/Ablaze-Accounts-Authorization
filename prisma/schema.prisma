generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONNECTION")
}

model User {
  uid          String      @id @default(uuid())
  createdAt    DateTime    @default(now())
  screen_name  String
  avatar       String
  account_type AccountType @default(GENERAL)

  // Relationships
  restore_token RestoreToken[]
  idp_email   IdpEmail?
  idp_github IdpGitHub?
  //idp_discord   IdpDiscord?
  accept_app AcceptApp[]
  //oauth2_code OAuth2AuthorizationCode[]
  refresh_token RefreshToken[]
}

enum AccountType {
  GENERAL
  MODERATOR
  SUPERUSER
}

model RestoreToken {
  id String @id @default(uuid())
  token String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  ip String?
  device String?
  browser String?

  // Relationships
  user User   @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid  String
}

model IdpEmail {
  id       String @id @default(cuid())
  email    String @unique
  password String
  nopassword Boolean @default(false)

  // Relationships
  user User   @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid  String @unique
}

model IdpGitHub {
  id String @id @default(cuid())
  githubid String @unique
  username String
  userlogin String

  // Relationships
  user User   @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid  String @unique
}

//model IdpDiscord {
//  id          String @id @default(cuid())
//  diid         String // Discord Internal ID
//  dsid         String // Discord Screen ID
//  screen_name String // Screen Name

// Relationships
//  user User   @relation(fields: [uid], references: [uid], onDelete: Cascade)
//  uid  String @unique
//}

model AcceptApp {
  id String @id @default(cuid())
  client_id String
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid String
}

model RefreshToken {
  id         String   @id @default(cuid())
  token      String   @unique
  expiration DateTime
  updatedAt  DateTime @default(now()) @updatedAt
  createdAt  DateTime @default(now())
  client_id String
  client_type ClientType
  scope String

  // Relationships
  user User   @relation(fields: [uid], references: [uid], onDelete: Cascade)
  uid  String
}

enum ClientType {
  PUBLIC
  CONFIDENTIAL
}
